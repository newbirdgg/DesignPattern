## 策略模式

* 策略模式定义了算法家族，分别封装起来，让他们之间可以相互替换，此模式让算法变化，不会影响到使用算法的客户

### 策略模式图
![](http://www.plantuml.com/plantuml/png/dL9DIm9H5Ds_N_5mLSG8RQM5EgisRTgscQRd1umpCFE2eWA5fXepMwG6KWinAQ8qAMZyaFxC-x1LVw5dpbkKDaHlTU-vvvu3zxouWpKRR-SC0BHD1zkQZg5kQ8u3rqM3KNft3q3nbX96shApE9DRDJ6oKvgE5XR10J0jZA2TJMTm3FB76g-sU7VmCIpHTftqFERbsPN7AXrMAl3w8MzVikUgAAZxGDqkAxVeUHDCxLJBr6s4aRHDXFlENqh-Pqdzsv80Tt103Revfp1G2iSa6nA_IFnJLZiM5zamUUNkfpUxRhsxPtpKveCNLhpveX4_J_nxskb9aYZ7tSRaRCEgq01INL4iA3bJzmXrNydeubiGJuLnqoNzes0aKs0djN6ZHFo-uF31BVFUY5-MQX6eEN1j6So40gFHUNZo5rmDS201kBAlA3EguUDa-5W5anT7vfRunPy0)

### 策略模式解析

* 策略模式是一种定义一系列算法的方法，从概念上来看所有这些算法完成的都是相同的工作，只是实现不同，他可以以相同的方式调用所有的算法，减少了各种算法类与使用算法类之间的耦合。
* 策略模式的Strategy类层为Context定义了一系列的可供重用的算法或行为。继承有助于析取出这些算法的公共功能。
* 策略模式的有点是简化了单元测试，因为每个算法都有自己的类，可以通过自己的接口单独测试。
* 当不同行为堆砌在一个类中时，就很难避免使用条件语句来选择合适的行为。将这些行为封装在一个个独立的Strategy类中，可以在使用这些行为的类中消除条件语句。
* 策略模式就是用来封装算法的，但是在实践中，我们发现可以用它来封装几乎任何类型规则，只要在分析过程中听到需要在不同时间应用不同的业务规则，就可以考虑使用策略模式处理这种变化的可能性。
* 在基本的策略模式中，选择所用具体实现的职责由客户端对象承担，并转给策略模式的Context对象。