## 装饰模式
动态的给一个对象添加一些额外的职责，就增加功能来说，装饰模式比生成子类更灵活。
### 装饰模式UML图
![](http://www.plantuml.com/plantuml/png/ZPFFJnD15CVl-rTCE6baIRms7g1wrWFNlGpj24te3DaTlQX9gq9iGyg1g80rnTIDQA9j4qnfruO_nfdPwSb_mLS6dnks6dfgtlVzU9_lcrsE90tbe-gcHzSY6TAI9ALD6aNahgXk2SwuVE8H-DrwiCL2AYk2txZfFVEua8o4bVKDMVYRQGvw-jkH6ZNKMKsTVT6zaHryCArOxtL__TWDkDxhgIHEaqDxVgZ6xvokcoUcLjVjlXackdbiwxlsjElzsO6NGYRP_tT1bTnvwllv8hVicf1IL8buc4yeO6WEodWdu9SysqCrsK-FNhh50KcDEiWKSA12QWS3TS3faAxwUu-L1428y3fCc9mHV5zaujc3O7JHThUdSHyOJ7C2MwM3vE8G94q-cSOvnB7TeafQ-kCRo0YuUH-RncSzU8qgX6VSpOvzCRdee2Ox0Ah6BKo18jix1H6iWnPlZwVjMjg9f_LzN6VMukk1Rf_0dv-rvrUEZ6ahpX6Vbikil2gfP8LL6LRu-ZoZiCePbM_shod5lEzkxCfiR95jqCSL4LvhHf4u-nToYkuFm0vyEEuS-7m2RhyFzQi-l1wqCViLeEKBX4Ra_cqlJqUMbkOAnKjXcV7oxEF-3G00)
### 装饰模式分析
* 装饰模式是利用SetComponent来读对象进行包装，每个装饰对象的实现就和如何使用这个对象分离开了，每个装饰只关心自己的功能，不需要关心如何被添加到对象链当中去
* 如果只有一个Concrete  Component类而没有抽象的Component类，那么Decorator类可以是ConcreteComponent的一个子类。同样道理，如果只有一个ConcreteDecorator类，那么就没有必要建立一个单独的Decorator类，而可以吧Decorator和ConcreteDecorator的责任合并成一个类。
### 装饰模式总结
* 装饰模式是为已有的功能动态的添加更多功能的一种方式
####什么时候用它呢？
* 在起初设计的时候，当系统需要新功能的时候，是向旧的类中添加新的代码，这些新加的代码通常装饰了原有类的核心职责或主要行为，在主类中加了新的字段，新的方法和新的逻辑，从而增加了主类的复杂度。而新加入的东西仅仅是为了满足一些只在某种特定情况下才会执行的特殊行为的需要。
* 针对上述问题，装饰模式提供了一个非常好的解决方案，他把每个要装饰的功能放在单独的类中，并让这个类包装他所要装饰的对象，因此，当需要执行特殊行为时，客户代码就可以在运行时根据需要有选择的、按顺序地使用装饰功能包装对象了。
* 装饰模式的优点：把类中的装饰功能从类中搬移出去，这样可以简化原有的类。
* 有效的把类的核心职责和装饰功能区分开了，而且可以去除相关类中的重复的装饰逻辑。