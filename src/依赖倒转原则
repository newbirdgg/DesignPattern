## 依赖倒转原则

* 依赖倒转原则
  1.  高层模块不应该依赖于低层模块。两个都应该依赖于抽象。
  2. 抽象不应该依赖于细节。细节应该依赖于抽象

#### 高层模块不应该依赖于低层模块

* 示例：我们做的项目大多要访问数据库，所以我们就把访问数据库的代码写成函数，每次做新项目去调用这些函数。这就叫高层模块依赖于低层模块。

问题：做新项目时，发现业务逻辑高层模块都是一样的，但是客户却希望使用不同的数据库或存储信息方式时却不能复用高层模块。

* 解决：如果高层模块和低层模块，他们都依赖于抽象，具体一点就是接口或者抽象类，只要接口是稳定的，那么任何一个的改变都不用担心其他受到影响，这就使得无论是高层模块还是低层模块都可以很容易的被复用。



### 里氏代换原则

* 一个软件实体如果使用的是一个父类的话，那么一定适用于其子类，而且他察觉不出父类对象和子类对象的区别。也就是说，在软件里面，把父类都替换成它的子类，程序的行为没有变化，简单的说，子类型必须能够替换掉他们的父类型。
* 只有当子类可以替换掉父类，软件单位的功能不受到影响时，父类才能真正被复用，而子类也能够在父类的基础上增加新的行为。
* 由于子类型的可替换性才使得使用父类类型的模块在无需修改的情况下就可以扩展。



**总结：依赖倒转其实可以说是面向对象设计的标志，用哪种语言编写程序不重要，如果编写时考虑的都是如何针对抽象编程而不是针对细节编程，即程序中所有的依赖关系都是终止于抽象类或者接口，那就是面向对象的设计，反之那就是过程化的设计**