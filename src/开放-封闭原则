## 开放-封闭原则

* 在设计模式中，这种不能修改，但可以扩展的思想也是最重要的一种设计原则，他就是开放-封闭原则

### 开放封闭原则解析

* 开放-封闭原则，是说软件实体（类、模块、函数等等）应该可以扩展，但是不可修改。
* 对于扩展是开放的，对于修改是关闭的
* 怎样的设计才能面对需求的改变却可以保持相对稳定，从而使得系统可以在第一个版本以后不断推出新的版本呢，开放-封闭给我们答案。

### 何时应对变化

* 开放-封闭原则的意思就是说，你设计的时候某时刻要考虑，尽量让这个类足够好，写的好了就不用去修改了，如果新需求来，我们就增加一些类就完事，原来的代码能不动则不动
* 无论模块多么的‘封闭’，都会存在一些无法对之封闭的变化。既然不可以完全封闭，设计人员必须对于他设计的模块应该应对哪种变化封闭做出选择。他必须先猜测出最有可能发生的变化种类，然后构造抽象来隔离那些变化。
* 面对需求，对程序的改动是通过增加新代码进行的，而不是更改现有的代码，这就是开放-封闭原则的精神所在。
* 我们希望的是在开发工作展开不久就知道可能发生的变化。查明可能发生的变化所等待的时间越长，要创建正确的抽象就越困难
* 开放-封闭原则是面向对象设计的核心所在。遵循这个原则可以带来面向对象技术所声称的巨大好处，也就是可维护、可扩展、可复用、灵活性好。开发人员应该仅对程序中呈现出频繁变化的那些部分做出抽象，然而，对于应用程序中的每个部分都可以的进行抽象同样不是一个好主意。拒绝不成熟的抽象和抽象本身一样重要。